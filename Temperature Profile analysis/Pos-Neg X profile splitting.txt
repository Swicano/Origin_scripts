// This script comes from '2x glass epoxy 160mW.opj' 
//  it takes the manually processed 'raw' data (aka bad data removed)
//  which has had the room temperature ratio subtracted
//        (of the format x and y voltages, and delta fluorescence ratios), 
//  and converts it into:
//         X and Y positions (voltage -> position, using data in col F)
//         Temperature (delta ratio -> delta temperature above Room Temp) 
//            and adds 21 (the average Room Temp)
//  as well as separating the Y axis into a positive and negative columns (for symmetry analysis)

range XaxisInput = col(A);
range YaxisInput = col(B); 
range ratioInput = col(E);
range outXposition =  col(G);
range outYposition =  col(H);
range outTemp =  col(I);
range inVars =  col(F);

range outnegYposition =  col(J);
range outposYposition =  col(K);

outnegYposition[L]$ = "neg position";
outposYposition[L]$ = "pos position";
outXposition[L]$ = "X Position (mm)" ;
outYposition[L]$ = "Y Position (mm)" ;
outTemp[L]$ = "Temperature" ;

int totRows = XaxisInput.nRows;
double xcenter = $(inVars[1]);
double ycenter = $(inVars[2]);
double xmmV = $(inVars[3]);
double ymmV = $(inVars[4]);
double tempSlope = $(inVars[5]);

double xOffset = 0.0;
//double subrangeStart = $(TempInput[1]); // first temperature in column
double subrangeLength = .1;            // space between subsets
double yposition = 0;
double subrangeEnd = $(XaxisInput[1]) + subrangeLength; // expected ending temperature
int outRowPos = 1;
//range Tmp1 = TempInput[5-Ncounter:5];
//TempMean[1] = Mean(Tmp1);
//int jj = 4;

loop(jj , 1 ,totRows)
{
  yposition = -($(YaxisInput[jj])-ycenter)*ymmV;
  if (yposition > 0)
  {
    outposYposition[jj] = abs(yposition);
  }
  else 
  {
    outnegYposition[jj] = abs(yposition);
  }
  outYposition[jj] = yposition;
  outXposition[jj] = -($(XaxisInput[jj])-xcenter)*xmmV;
  outTemp[jj] = ($(ratioInput[jj]))/tempSlope+21;
}